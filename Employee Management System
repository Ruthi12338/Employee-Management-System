from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///employees.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Models
class Admin(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True)
    password = db.Column(db.String(150))

class Employee(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100))
    department = db.Column(db.String(100))
    position = db.Column(db.String(100))
    salary = db.Column(db.Float)

@login_manager.user_loader
def load_user(user_id):
    return Admin.query.get(int(user_id))

# Routes

@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = Admin.query.filter_by(username=request.form['username']).first()
        if user and bcrypt.check_password_hash(user.password, request.form['password']):
            login_user(user)
            return redirect(url_for('dashboard'))
        return 'Invalid credentials'
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    employees = Employee.query.all()
    return render_template('employee_list.html', employees=employees)

@app.route('/employee/add', methods=['GET', 'POST'])
@login_required
def add_employee():
    if request.method == 'POST':
        name = request.form['name']
        department = request.form['department']
        position = request.form['position']
        salary = request.form['salary']
        if not name or not salary:
            return "Name and salary required"
        employee = Employee(name=name, department=department, position=position, salary=float(salary))
        db.session.add(employee)
        db.session.commit()
        return redirect(url_for('dashboard'))
    return render_template('employee_form.html', action="Add")

@app.route('/employee/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_employee(id):
    employee = Employee.query.get_or_404(id)
    if request.method == 'POST':
        employee.name = request.form['name']
        employee.department = request.form['department']
        employee.position = request.form['position']
        employee.salary = float(request.form['salary'])
        db.session.commit()
        return redirect(url_for('dashboard'))
    return render_template('employee_form.html', employee=employee, action="Edit")

@app.route('/employee/delete/<int:id>')
@login_required
def delete_employee(id):
    employee = Employee.query.get_or_404(id)
    db.session.delete(employee)
    db.session.commit()
    return redirect(url_for('dashboard'))

# One-time admin user creation (you can remove after creating one admin)
@app.before_first_request
def create_tables():
    db.create_all()
    if not Admin.query.filter_by(username='admin').first():
        hashed_pw = bcrypt.generate_password_hash('admin123').decode('utf-8')
        new_admin = Admin(username='admin', password=hashed_pw)
        db.session.add(new_admin)
        db.session.commit()

if __name__ == '__main__':
    app.run(debug=True)
